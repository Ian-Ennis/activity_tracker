{"version":3,"file":"history.production.min.js","sources":["../../../packages/history/modules/index.js"],"sourcesContent":["const PopAction = 'POP';\nconst PushAction = 'PUSH';\nconst ReplaceAction = 'REPLACE';\n\nconst BeforeUnloadEventType = 'beforeunload';\nconst HashChangeEventType = 'hashchange';\nconst PopStateEventType = 'popstate';\n\nconst readOnly = __DEV__ ? obj => Object.freeze(obj) : obj => obj;\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// BROWSER\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Browser history stores the location in regular URLs. This is the\n * standard for most web apps, but it requires some configuration on\n * the server to ensure you serve the same app at multiple URLs.\n */\nexport function createBrowserHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname, search, hash } = window.location;\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HASH\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Hash history stores the location in window.location.hash. This makes\n * it ideal for situations where you don't want to send the location to\n * the server for some reason, either because you do cannot configure it\n * or the URL space is reserved for something else.\n */\nexport function createHashHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname = '/', search = '', hash = '' } = parsePath(\n      window.location.hash.substr(1)\n    );\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  // TODO: Is this still necessary? Which browsers do\n  // not trigger popstate when the hash changes?\n  window.addEventListener(HashChangeEventType, event => {\n    let [, nextLocation] = getIndexAndLocation();\n\n    // Ignore extraneous hashchange events.\n    if (createPath(nextLocation) !== createPath(location)) {\n      handlePop();\n    }\n  });\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function getBaseHref() {\n    let base = document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href;\n  }\n\n  function createHref(to) {\n    return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// MEMORY\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Memory history stores the current location in memory. It is designed\n * for use in stateful non-browser environments like headless tests (in\n * node.js) and React Native.\n */\nexport function createMemoryHistory({\n  initialEntries = ['/'],\n  initialIndex = 0\n} = {}) {\n  let entries = initialEntries.map(entry => {\n    let location = readOnly({\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null,\n      key: createKey(),\n      ...(typeof entry === 'string' ? parsePath(entry) : entry)\n    });\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: ${JSON.stringify(\n        entry\n      )})`\n    );\n\n    return location;\n  });\n  let index = clamp(initialIndex, 0, entries.length - 1);\n\n  let action = PopAction;\n  let location = entries[index];\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction, nextLocation) {\n    action = nextAction;\n    location = nextLocation;\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      entries[index] = nextLocation;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function go(n) {\n    let nextIndex = clamp(index + n, 0, entries.length - 1);\n    let nextAction = PopAction;\n    let nextLocation = entries[nextIndex];\n    function retry() {\n      go(n);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index = nextIndex;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      return blockers.push(fn);\n    }\n  };\n\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction promptBeforeUnload(event) {\n  // Cancel the event.\n  event.preventDefault();\n  // Chrome (and legacy IE) requires returnValue to be set.\n  event.returnValue = '';\n}\n\nfunction createEvents() {\n  let handlers = [];\n\n  return {\n    get length() {\n      return handlers.length;\n    },\n    push(fn) {\n      handlers.push(fn);\n      return function() {\n        handlers = handlers.filter(handler => handler !== fn);\n      };\n    },\n    call(arg) {\n      handlers.forEach(fn => fn && fn(arg));\n    }\n  };\n}\n\nfunction createKey() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 8);\n}\n\nexport function createPath({ pathname = '/', search = '', hash = '' }) {\n  return pathname + search + hash;\n}\n\nexport function parsePath(path) {\n  let pieces = {};\n\n  if (path) {\n    let hashIndex = path.indexOf('#');\n    if (hashIndex >= 0) {\n      pieces.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf('?');\n    if (searchIndex >= 0) {\n      pieces.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      pieces.pathname = path;\n    }\n  }\n\n  return pieces;\n}\n"],"names":["promptBeforeUnload","event","createEvents","handlers","length","push","fn","handler","call","arg","createKey","createPath","parsePath","path","pieces","hashIndex","searchIndex","createBrowserHistory","window","state","globalHistory","obj","pathname","search","hash","key","to","location","nextAction","action","getIndexAndLocation","n","document","blockedPopTx","PopStateEventType","blockers","nextIndex","index","PopAction","nextLocation","retry","go","listeners","idx","history","createHref","getNextLocation","PushAction","usr","historyState","url","error","applyTx","replace","ReplaceAction","back","forward","listen","block","unblock","BeforeUnloadEventType","createHashHistory","base","href","handlePop","HashChangeEventType","createMemoryHistory","Math","lowerBound","entries","entry","initialIndex"],"mappings":"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"}