{"version":3,"file":"memory.js","sources":["../../packages/history/modules/index.js"],"sourcesContent":["const PopAction = 'POP';\nconst PushAction = 'PUSH';\nconst ReplaceAction = 'REPLACE';\n\nconst BeforeUnloadEventType = 'beforeunload';\nconst HashChangeEventType = 'hashchange';\nconst PopStateEventType = 'popstate';\n\nconst readOnly = __DEV__ ? obj => Object.freeze(obj) : obj => obj;\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// BROWSER\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Browser history stores the location in regular URLs. This is the\n * standard for most web apps, but it requires some configuration on\n * the server to ensure you serve the same app at multiple URLs.\n */\nexport function createBrowserHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname, search, hash } = window.location;\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HASH\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Hash history stores the location in window.location.hash. This makes\n * it ideal for situations where you don't want to send the location to\n * the server for some reason, either because you do cannot configure it\n * or the URL space is reserved for something else.\n */\nexport function createHashHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname = '/', search = '', hash = '' } = parsePath(\n      window.location.hash.substr(1)\n    );\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  // TODO: Is this still necessary? Which browsers do\n  // not trigger popstate when the hash changes?\n  window.addEventListener(HashChangeEventType, event => {\n    let [, nextLocation] = getIndexAndLocation();\n\n    // Ignore extraneous hashchange events.\n    if (createPath(nextLocation) !== createPath(location)) {\n      handlePop();\n    }\n  });\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function getBaseHref() {\n    let base = document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href;\n  }\n\n  function createHref(to) {\n    return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// MEMORY\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Memory history stores the current location in memory. It is designed\n * for use in stateful non-browser environments like headless tests (in\n * node.js) and React Native.\n */\nexport function createMemoryHistory({\n  initialEntries = ['/'],\n  initialIndex = 0\n} = {}) {\n  let entries = initialEntries.map(entry => {\n    let location = readOnly({\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null,\n      key: createKey(),\n      ...(typeof entry === 'string' ? parsePath(entry) : entry)\n    });\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: ${JSON.stringify(\n        entry\n      )})`\n    );\n\n    return location;\n  });\n  let index = clamp(initialIndex, 0, entries.length - 1);\n\n  let action = PopAction;\n  let location = entries[index];\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction, nextLocation) {\n    action = nextAction;\n    location = nextLocation;\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      entries[index] = nextLocation;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function go(n) {\n    let nextIndex = clamp(index + n, 0, entries.length - 1);\n    let nextAction = PopAction;\n    let nextLocation = entries[nextIndex];\n    function retry() {\n      go(n);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index = nextIndex;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      return blockers.push(fn);\n    }\n  };\n\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction promptBeforeUnload(event) {\n  // Cancel the event.\n  event.preventDefault();\n  // Chrome (and legacy IE) requires returnValue to be set.\n  event.returnValue = '';\n}\n\nfunction createEvents() {\n  let handlers = [];\n\n  return {\n    get length() {\n      return handlers.length;\n    },\n    push(fn) {\n      handlers.push(fn);\n      return function() {\n        handlers = handlers.filter(handler => handler !== fn);\n      };\n    },\n    call(arg) {\n      handlers.forEach(fn => fn && fn(arg));\n    }\n  };\n}\n\nfunction createKey() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 8);\n}\n\nexport function createPath({ pathname = '/', search = '', hash = '' }) {\n  return pathname + search + hash;\n}\n\nexport function parsePath(path) {\n  let pieces = {};\n\n  if (path) {\n    let hashIndex = path.indexOf('#');\n    if (hashIndex >= 0) {\n      pieces.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf('?');\n    if (searchIndex >= 0) {\n      pieces.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      pieces.pathname = path;\n    }\n  }\n\n  return pieces;\n}\n"],"names":["readOnly","__DEV__","obj","Object","warning","cond","message","console","Error","e","createEvents","handlers","length","push","fn","handler","call","arg","parsePath","path","pieces","hashIndex","searchIndex","createMemoryHistory","getNextLocation","to","state","location","key","Math","allowTx","action","retry","blockers","applyTx","nextAction","nextLocation","listeners","JSON","PushAction","index","entries","replace","ReplaceAction","go","n","nextIndex","lowerBound","PopAction","initialIndex","initialEntries","entry","pathname","search","hash","history","createHref","createPath","back","forward","listen","block"],"mappings":"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"}