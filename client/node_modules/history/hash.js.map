{"version":3,"file":"hash.js","sources":["../../packages/history/modules/index.js","../../packages/history/modules/hash.js"],"sourcesContent":["const PopAction = 'POP';\nconst PushAction = 'PUSH';\nconst ReplaceAction = 'REPLACE';\n\nconst BeforeUnloadEventType = 'beforeunload';\nconst HashChangeEventType = 'hashchange';\nconst PopStateEventType = 'popstate';\n\nconst readOnly = __DEV__ ? obj => Object.freeze(obj) : obj => obj;\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// BROWSER\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Browser history stores the location in regular URLs. This is the\n * standard for most web apps, but it requires some configuration on\n * the server to ensure you serve the same app at multiple URLs.\n */\nexport function createBrowserHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname, search, hash } = window.location;\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HASH\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Hash history stores the location in window.location.hash. This makes\n * it ideal for situations where you don't want to send the location to\n * the server for some reason, either because you do cannot configure it\n * or the URL space is reserved for something else.\n */\nexport function createHashHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname = '/', search = '', hash = '' } = parsePath(\n      window.location.hash.substr(1)\n    );\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  // TODO: Is this still necessary? Which browsers do\n  // not trigger popstate when the hash changes?\n  window.addEventListener(HashChangeEventType, event => {\n    let [, nextLocation] = getIndexAndLocation();\n\n    // Ignore extraneous hashchange events.\n    if (createPath(nextLocation) !== createPath(location)) {\n      handlePop();\n    }\n  });\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function getBaseHref() {\n    let base = document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href;\n  }\n\n  function createHref(to) {\n    return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// MEMORY\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Memory history stores the current location in memory. It is designed\n * for use in stateful non-browser environments like headless tests (in\n * node.js) and React Native.\n */\nexport function createMemoryHistory({\n  initialEntries = ['/'],\n  initialIndex = 0\n} = {}) {\n  let entries = initialEntries.map(entry => {\n    let location = readOnly({\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null,\n      key: createKey(),\n      ...(typeof entry === 'string' ? parsePath(entry) : entry)\n    });\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: ${JSON.stringify(\n        entry\n      )})`\n    );\n\n    return location;\n  });\n  let index = clamp(initialIndex, 0, entries.length - 1);\n\n  let action = PopAction;\n  let location = entries[index];\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction, nextLocation) {\n    action = nextAction;\n    location = nextLocation;\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      entries[index] = nextLocation;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function go(n) {\n    let nextIndex = clamp(index + n, 0, entries.length - 1);\n    let nextAction = PopAction;\n    let nextLocation = entries[nextIndex];\n    function retry() {\n      go(n);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index = nextIndex;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      return blockers.push(fn);\n    }\n  };\n\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction promptBeforeUnload(event) {\n  // Cancel the event.\n  event.preventDefault();\n  // Chrome (and legacy IE) requires returnValue to be set.\n  event.returnValue = '';\n}\n\nfunction createEvents() {\n  let handlers = [];\n\n  return {\n    get length() {\n      return handlers.length;\n    },\n    push(fn) {\n      handlers.push(fn);\n      return function() {\n        handlers = handlers.filter(handler => handler !== fn);\n      };\n    },\n    call(arg) {\n      handlers.forEach(fn => fn && fn(arg));\n    }\n  };\n}\n\nfunction createKey() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 8);\n}\n\nexport function createPath({ pathname = '/', search = '', hash = '' }) {\n  return pathname + search + hash;\n}\n\nexport function parsePath(path) {\n  let pieces = {};\n\n  if (path) {\n    let hashIndex = path.indexOf('#');\n    if (hashIndex >= 0) {\n      pieces.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf('?');\n    if (searchIndex >= 0) {\n      pieces.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      pieces.pathname = path;\n    }\n  }\n\n  return pieces;\n}\n","import { createHashHistory } from './index.js';\nexport { createHashHistory };\n\n/**\n * Create a default instance for the current document.\n */\nexport default createHashHistory();\n"],"names":["readOnly","__DEV__","obj","Object","warning","cond","message","console","Error","e","createHashHistory","getIndexAndLocation","parsePath","window","state","globalHistory","pathname","search","hash","key","handlePop","blockedPopTx","blockers","nextIndex","nextLocation","n","index","go","action","PopAction","location","retry","applyTx","createHref","to","base","document","href","url","hashIndex","createPath","getNextLocation","Math","nextAction","listeners","push","JSON","PushAction","usr","idx","historyState","error","replace","ReplaceAction","PopStateEventType","HashChangeEventType","createEvents","history","back","forward","listen","fn","block","unblock","BeforeUnloadEventType","promptBeforeUnload","event","handlers","length","handler","call","arg","path","pieces","searchIndex"],"mappings":"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"}