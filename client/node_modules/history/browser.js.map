{"version":3,"file":"browser.js","sources":["../../packages/history/modules/index.js","../../packages/history/modules/browser.js"],"sourcesContent":["const PopAction = 'POP';\nconst PushAction = 'PUSH';\nconst ReplaceAction = 'REPLACE';\n\nconst BeforeUnloadEventType = 'beforeunload';\nconst HashChangeEventType = 'hashchange';\nconst PopStateEventType = 'popstate';\n\nconst readOnly = __DEV__ ? obj => Object.freeze(obj) : obj => obj;\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// BROWSER\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Browser history stores the location in regular URLs. This is the\n * standard for most web apps, but it requires some configuration on\n * the server to ensure you serve the same app at multiple URLs.\n */\nexport function createBrowserHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname, search, hash } = window.location;\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HASH\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Hash history stores the location in window.location.hash. This makes\n * it ideal for situations where you don't want to send the location to\n * the server for some reason, either because you do cannot configure it\n * or the URL space is reserved for something else.\n */\nexport function createHashHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname = '/', search = '', hash = '' } = parsePath(\n      window.location.hash.substr(1)\n    );\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  // TODO: Is this still necessary? Which browsers do\n  // not trigger popstate when the hash changes?\n  window.addEventListener(HashChangeEventType, event => {\n    let [, nextLocation] = getIndexAndLocation();\n\n    // Ignore extraneous hashchange events.\n    if (createPath(nextLocation) !== createPath(location)) {\n      handlePop();\n    }\n  });\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function getBaseHref() {\n    let base = document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href;\n  }\n\n  function createHref(to) {\n    return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// MEMORY\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Memory history stores the current location in memory. It is designed\n * for use in stateful non-browser environments like headless tests (in\n * node.js) and React Native.\n */\nexport function createMemoryHistory({\n  initialEntries = ['/'],\n  initialIndex = 0\n} = {}) {\n  let entries = initialEntries.map(entry => {\n    let location = readOnly({\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null,\n      key: createKey(),\n      ...(typeof entry === 'string' ? parsePath(entry) : entry)\n    });\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: ${JSON.stringify(\n        entry\n      )})`\n    );\n\n    return location;\n  });\n  let index = clamp(initialIndex, 0, entries.length - 1);\n\n  let action = PopAction;\n  let location = entries[index];\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction, nextLocation) {\n    action = nextAction;\n    location = nextLocation;\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      entries[index] = nextLocation;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function go(n) {\n    let nextIndex = clamp(index + n, 0, entries.length - 1);\n    let nextAction = PopAction;\n    let nextLocation = entries[nextIndex];\n    function retry() {\n      go(n);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index = nextIndex;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      return blockers.push(fn);\n    }\n  };\n\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction promptBeforeUnload(event) {\n  // Cancel the event.\n  event.preventDefault();\n  // Chrome (and legacy IE) requires returnValue to be set.\n  event.returnValue = '';\n}\n\nfunction createEvents() {\n  let handlers = [];\n\n  return {\n    get length() {\n      return handlers.length;\n    },\n    push(fn) {\n      handlers.push(fn);\n      return function() {\n        handlers = handlers.filter(handler => handler !== fn);\n      };\n    },\n    call(arg) {\n      handlers.forEach(fn => fn && fn(arg));\n    }\n  };\n}\n\nfunction createKey() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 8);\n}\n\nexport function createPath({ pathname = '/', search = '', hash = '' }) {\n  return pathname + search + hash;\n}\n\nexport function parsePath(path) {\n  let pieces = {};\n\n  if (path) {\n    let hashIndex = path.indexOf('#');\n    if (hashIndex >= 0) {\n      pieces.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf('?');\n    if (searchIndex >= 0) {\n      pieces.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      pieces.pathname = path;\n    }\n  }\n\n  return pieces;\n}\n","import { createBrowserHistory } from './index.js';\nexport { createBrowserHistory };\n\n/**\n * Create a default instance for the current document.\n */\nexport default createBrowserHistory();\n"],"names":["readOnly","__DEV__","obj","Object","warning","cond","message","console","Error","e","createBrowserHistory","getIndexAndLocation","window","state","globalHistory","pathname","search","hash","key","createHref","to","createPath","getNextLocation","location","pieces","path","hashIndex","searchIndex","Math","applyTx","nextAction","action","index","listeners","push","retry","nextLocation","blockers","PushAction","usr","idx","historyState","url","error","replace","ReplaceAction","go","n","document","blockedPopTx","PopStateEventType","nextIndex","PopAction","createEvents","history","back","forward","listen","fn","block","unblock","BeforeUnloadEventType","promptBeforeUnload","event","handlers","length","handler","call","arg"],"mappings":"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"}