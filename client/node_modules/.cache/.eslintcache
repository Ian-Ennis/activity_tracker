[{"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/index.js":"1","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/reportWebVitals.js":"2","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/App.js":"3","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Login.js":"4","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/LoginForm.js":"5","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/SignUpForm.js":"6","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Header.js":"7","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Home.js":"8","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/YogaForm.js":"9","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/MeditationForm.js":"10","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/CardioForm.js":"11"},{"size":456,"mtime":1643159248701,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1642703059764,"results":"14","hashOfConfig":"13"},{"size":787,"mtime":1643159234031,"results":"15","hashOfConfig":"13"},{"size":906,"mtime":1643158210542,"results":"16","hashOfConfig":"13"},{"size":1238,"mtime":1643137277707,"results":"17","hashOfConfig":"13"},{"size":1600,"mtime":1643158210542,"results":"18","hashOfConfig":"13"},{"size":148,"mtime":1643158210541,"results":"19","hashOfConfig":"13"},{"size":4726,"mtime":1643159443118,"results":"20","hashOfConfig":"13"},{"size":571,"mtime":1643158210542,"results":"21","hashOfConfig":"13"},{"size":511,"mtime":1643158210542,"results":"22","hashOfConfig":"13"},{"size":641,"mtime":1643160199875,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1o3qrgr",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/index.js",[],["51","52"],"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/reportWebVitals.js",[],"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/App.js",["53","54"],"import { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Login from \"./components/Login\";\nimport Home from \"./components/Home\";\n\nexport default function App() {\n  const [user, setUser] = useState();\n  const [activity, setActivity] = useState('');\n\n  const header = <h1>Leg Up</h1>;\n\n  return (\n    <div className=\"App\">\n      <Header header={header} />\n      <Login onLogin={setUser} />\n      <Home setActivity={setActivity} />\n    </div>\n  );\n}\n\n// npm install react-router-dom\n\n/* <Header header={header} />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/login\" element={<Login onLogin={setUser}/>} />\n          <Route path=\"/home\" element={<Home activity={activity} setActivity={setActivity}/>} />\n        </Routes>\n      </BrowserRouter> */\n","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Login.js",[],"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/LoginForm.js",["55"],"import React, { useState } from 'react'\n\nexport default function LoginForm ({ onLogin }) {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  function handleSubmit (e) {\n    e.preventDefault()\n    setIsLoading(true)\n    fetch('/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ username, password })\n    }).then(r => {\n      setIsLoading(false)\n      if (r.ok) {\n        r.json().then(user => onLogin(user))\n      } else {\n        r.json().then(err => setErrors(err.errors))\n      }\n    })\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor='username'>Username</label>\n      <input\n        type='text'\n        id='username'\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n      />\n      <label htmlFor='password'>Password</label>\n      <input\n        type='password'\n        id='password'\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n      />\n      <button type='submit'>{isLoading ? 'Loading...' : 'Login'}</button>\n    </form>\n  )\n}\n","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/SignUpForm.js",["56"],"import React, { useState } from 'react'\n\nexport default function SignUpForm ({ onLogin }) {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [email, setEmail] = useState('')\n  const [errors, setErrors] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  // \n\n  function handleSubmit (e) {\n    e.preventDefault()\n    setErrors([])\n    setIsLoading(true)\n    fetch('https://localhost:3000/api/v1/users', {\n      method: 'POST',\n      headers: {\n        Accepts: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({user: {\n        username,\n        password,\n        email\n      }\n      }),\n    }).then(r => {\n      setIsLoading(false)\n      if (r.ok) {\n        r.json().then(user => onLogin(user))\n      } else {\n        r.json().then(err => setErrors(err.errors))\n      }\n    })\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor='username'>Username</label>\n      <input\n        type='text'\n        id='username'\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n      />\n      <label htmlFor='password'>Password</label>\n      <input\n        type='password'\n        id='password'\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n      />\n      <label htmlFor='email'>Email</label>\n      <input\n        type='text'\n        id='email'\n        value={email}\n        onChange={e => setEmail(e.target.value)}\n      />\n      <button type='submit'>{isLoading ? 'Loading...' : 'Sign Up'}</button>\n    </form>\n  )\n}\n","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Header.js",[],"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Home.js",["57","58","59","60"],"import { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport MeditationForm from \"./MeditationForm\";\nimport YogaForm from \"./YogaForm\";\nimport CardioForm from \"./CardioForm\";\n\nexport default function Home({ header, activity, setActivity }) {\n  const initialOptions = [\n    { value: \"meditation\", label: \"🧘 Meditation\" },\n    { value: \"yoga\", label: \"🤸‍♂️ Yoga\" },\n    { value: \"cardio\", label: \"🏃🏽 Cardio\" }\n    ];\n\n  const [activityOptions, setActivityOptions] = useState(initialOptions);\n  const [meditationSessions, setmeditationSessions] = useState(false);\n  const [yogaSessions, setyogaSessions] = useState(false);\n  const [cardioSessions, setcardioSessions] = useState(false);\n\n  function selectActivity(e) {\n    console.log(\"inside update activity function\");\n    console.log(e.value);\n    setActivity(e.value);\n    console.log(activity);\n  }\n\n  useEffect(() => {\n    fetch(`/activities`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.log(\"Reponse was bad\");\n        }\n      })\n      .then(console.log(\"attempt to fetch activities\"))\n      .catch((err) => {\n        console.log(`${err}; failed to fetch activities`);\n      });\n  }, []);\n\n  function handleMeditationSubmit(e) {\n    e.preventDefault();\n    setmeditationSessions(true)\n\n    const time = e.target.time.value;\n    const date = e.target.date.value;\n\n    fetch(\"/meditation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        time: time,\n        date: date\n      }),\n    });\n  }\n\n  function handleYogaSubmit(e) {\n    e.preventDefault();\n    setyogaSessions(true)\n\n    const time = e.target.time.value;\n    const type = e.target.type.value;\n    const date = e.target.date.value;\n\n    fetch(\"/yoga\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        time: time,\n        type: type,\n        date: date,\n      }),\n    });\n  }\n\n  function handleCardioSubmit(e) {\n    e.preventDefault();\n    setcardioSessions(true)\n\n    const type = e.target.type.value;\n    const distance = e.target.distance.value;\n    const time = e.target.time.value;\n    const date = e.target.date.value;\n\n    fetch(\"/meditation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        type: type,\n        distance: distance,\n        time: time,\n        date: date,\n      }),\n    });\n  }\n\n  function seeProgress() {\n    console.log(activity);\n  }\n\n  return (\n    <div>\n      <div class=\"header\">{header}</div>\n      <div class=\"site_info\">\n        <p>\n          Down to meditate? Into yoga? Always on the move? Log your self-care\n          sessions using the menu below, and keep track of your kick-ass\n          routines as you practice.\n        </p>\n      </div>\n      <Select\n        className=\"activity_dropdown\"\n        autofocus\n        isSearchable\n        placeholder=\"Select activity\"\n        options={activityOptions}\n        onChange={selectActivity}\n      />\n      {activity === 'meditation' ? (\n        <MeditationForm\n          handleMeditationSubmit={handleMeditationSubmit}\n          activity={activity}\n          seeProgress={seeProgress}\n        />\n      ) : null}\n      {activity === 'yoga' ? (\n        <YogaForm\n          handleYogaSubmit={handleYogaSubmit}\n          activity={activity}\n          seeProgress={seeProgress}\n        />\n      ) : null}\n      {activity === 'cardio' ? (\n        <CardioForm\n          handleCardioSubmit={handleCardioSubmit}\n          activity={activity}\n          seeProgress={seeProgress}\n        />\n      ) : null}\n    </div>\n  );\n}\n\n// Learn how to do a POST on a submit event\n// For monday: learn how to do a fetch on a click event\n// Create a form to be rendered for each activity selection..?\n// Learn how to update state upon setState if needed\n// I think setting state on submit button will re-render and re-fetch updated tables?\n\n// Back end\n// Add login database code by merging ian_practice with main\n// I think the routes we'll need for home are... /activities [:index] (GET)\n// And /activities/meditation [:create] ()\n// And /activities/yoga [:create]\n// And /activities/cardio [:create]\n\n// Goals:\n// Decide how to show and build the database entries for meditation, yoga and cardio in their own tables\n// Make a [:update] (PATCH) route, and [:destroy] (DELETE route) for these tables\n\n// code for later\n//   function customTheme(theme) {\n//       return {\n//           ...theme,\n//           colors: {\n//               ...theme.colors\n//           }\n//       }\n//   }\n","/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/YogaForm.js",[],"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/MeditationForm.js",[],"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/CardioForm.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":7,"column":10,"nodeType":"67","messageId":"68","endLine":7,"endColumn":14},{"ruleId":"65","severity":1,"message":"69","line":8,"column":10,"nodeType":"67","messageId":"68","endLine":8,"endColumn":18},{"ruleId":"65","severity":1,"message":"70","line":6,"column":10,"nodeType":"67","messageId":"68","endLine":6,"endColumn":16},{"ruleId":"65","severity":1,"message":"70","line":7,"column":10,"nodeType":"67","messageId":"68","endLine":7,"endColumn":16},{"ruleId":"65","severity":1,"message":"71","line":14,"column":27,"nodeType":"67","messageId":"68","endLine":14,"endColumn":45},{"ruleId":"65","severity":1,"message":"72","line":15,"column":10,"nodeType":"67","messageId":"68","endLine":15,"endColumn":28},{"ruleId":"65","severity":1,"message":"73","line":16,"column":10,"nodeType":"67","messageId":"68","endLine":16,"endColumn":22},{"ruleId":"65","severity":1,"message":"74","line":17,"column":10,"nodeType":"67","messageId":"68","endLine":17,"endColumn":24},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'activity' is assigned a value but never used.","'errors' is assigned a value but never used.","'setActivityOptions' is assigned a value but never used.","'meditationSessions' is assigned a value but never used.","'yogaSessions' is assigned a value but never used.","'cardioSessions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]