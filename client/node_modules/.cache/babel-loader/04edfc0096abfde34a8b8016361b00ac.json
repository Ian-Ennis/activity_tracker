{"ast":null,"code":"var _jsxFileName = \"/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport MeditationForm from \"./MeditationForm\";\nimport YogaForm from \"./YogaForm\";\nimport CardioForm from \"./CardioForm\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  header,\n  activity,\n  setActivity\n}) {\n  _s();\n\n  const initialOptions = [{\n    value: \"meditation\",\n    label: \"🧘 Meditation\"\n  }, {\n    value: \"yoga\",\n    label: \"🤸‍♂️ Yoga\"\n  }, {\n    value: \"cardio\",\n    label: \"🏃🏽 Cardio\"\n  }, {\n    value: \"create_new\",\n    label: \"✏️ Add your own activity!\"\n  }]; // const [activityOptions, setActivityOptions] = useState(initialOptions);\n\n  const [meditationSessions, setmeditationSessions] = useState(false);\n  const [yogaSessions, setyogaSessions] = useState(false);\n  const [cardioSessions, setcardioSessions] = useState(false);\n\n  function selectActivity(e) {\n    console.log(\"inside update activity function\");\n    setActivity(e.value);\n  }\n\n  useEffect(() => {\n    fetch(`/activities`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        console.log(\"Reponse was bad\");\n      }\n    }).then(console.log(\"attempt to fetch activities\")).catch(err => {\n      console.log(`${err}; failed to fetch activities`);\n    });\n  }, []);\n\n  function handleMeditationSubmit(e) {\n    e.preventDefault();\n    setmeditationSessions(true);\n    const time = e.target.time.value;\n    const date = e.target.date.value;\n    fetch(\"/meditation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        time: time,\n        date: date\n      })\n    });\n  }\n\n  function handleYogaSubmit(e) {\n    e.preventDefault();\n    setyogaSessions(true);\n    const time = e.target.time.value;\n    const type = e.target.type.value;\n    const date = e.target.date.value;\n    fetch(\"/yoga\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        time: time,\n        type: type,\n        date: date\n      })\n    });\n  }\n\n  function handleCardioSubmit(e) {\n    e.preventDefault();\n    setcardioSessions(true);\n    const type = e.target.type.value;\n    const distance = e.target.distance.value;\n    const time = e.target.time.value;\n    const date = e.target.date.value;\n    fetch(\"/meditation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        type: type,\n        distance: distance,\n        time: time,\n        date: date\n      })\n    });\n  }\n\n  function seeProgress() {\n    console.log(activity);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"header\",\n      children: header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"site_info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Down to meditate? Into yoga? Always on the move? Log your self-care sessions using the menu below, and keep track of your kick-ass routines as you practice.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      autofocus: true,\n      className: \"activity_dropdown\",\n      isSearchable: true,\n      placeholder: \"Select activity\",\n      onChange: selectActivity,\n      options: activityOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), activity === \"meditation\" ? /*#__PURE__*/_jsxDEV(MeditationForm, {\n      handleMeditationSubmit: handleMeditationSubmit,\n      activity: activity,\n      seeProgress: seeProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this) : null, activity === \"yoga\" ? /*#__PURE__*/_jsxDEV(YogaForm, {\n      handleYogaSubmit: handleYogaSubmit,\n      activity: activity,\n      seeProgress: seeProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this) : null, activity === \"cardio\" ? /*#__PURE__*/_jsxDEV(CardioForm, {\n      handleCardioSubmit: handleCardioSubmit,\n      activity: activity,\n      seeProgress: seeProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n} // Learn how to do a POST on a submit event\n// For monday: learn how to do a fetch on a click event\n// Create a form to be rendered for each activity selection..?\n// Learn how to update state upon setState if needed\n// I think setting state on submit button will re-render and re-fetch updated tables?\n// Back end\n// Add login database code by merging ian_practice with main\n// I think the routes we'll need for home are... /activities [:index] (GET)\n// And /activities/meditation [:create] ()\n// And /activities/yoga [:create]\n// And /activities/cardio [:create]\n// Goals:\n// Decide how to show and build the database entries for meditation, yoga and cardio in their own tables\n// Make a [:update] (PATCH) route, and [:destroy] (DELETE route) for these tables\n// code for later\n//   function customTheme(theme) {\n//       return {\n//           ...theme,\n//           colors: {\n//               ...theme.colors\n//           }\n//       }\n//   }\n\n_s(Home, \"6lyfR0tQbfBuijCXhAFBff5NN9I=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/Ian/Development/code/mod4/activity_tracker/leg_up_activity_app/client/src/components/Home.js"],"names":["useEffect","useState","Select","MeditationForm","YogaForm","CardioForm","useNavigate","Home","header","activity","setActivity","initialOptions","value","label","meditationSessions","setmeditationSessions","yogaSessions","setyogaSessions","cardioSessions","setcardioSessions","selectActivity","e","console","log","fetch","then","response","ok","json","catch","err","handleMeditationSubmit","preventDefault","time","target","date","method","headers","body","JSON","stringify","handleYogaSubmit","type","handleCardioSubmit","distance","seeProgress","activityOptions"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport MeditationForm from \"./MeditationForm\";\nimport YogaForm from \"./YogaForm\";\nimport CardioForm from \"./CardioForm\";\nimport {useNavigate} from 'react-router-dom';\n\n\nexport default function Home({ header, activity, setActivity }) {\n  const initialOptions = [\n    { value: \"meditation\", label: \"🧘 Meditation\" },\n    { value: \"yoga\", label: \"🤸‍♂️ Yoga\" },\n    { value: \"cardio\", label: \"🏃🏽 Cardio\" },\n    { value: \"create_new\", label: \"✏️ Add your own activity!\" },\n  ];\n  // const [activityOptions, setActivityOptions] = useState(initialOptions);\n  const [meditationSessions, setmeditationSessions] = useState(false)\n  const [yogaSessions, setyogaSessions] = useState(false)\n  const [cardioSessions, setcardioSessions] = useState(false)\n\n\n  function selectActivity(e) {\n    console.log(\"inside update activity function\");\n    setActivity(e.value);\n  }\n\n  useEffect(() => {\n    fetch(`/activities`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.log(\"Reponse was bad\");\n        }\n      })\n      .then(console.log(\"attempt to fetch activities\"))\n      .catch((err) => {\n        console.log(`${err}; failed to fetch activities`);\n      });\n  }, []);\n\n  function handleMeditationSubmit(e) {\n    e.preventDefault();\n    setmeditationSessions(true)\n\n    const time = e.target.time.value;\n    const date = e.target.date.value;\n\n    fetch(\"/meditation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        time: time,\n        date: date,\n      }),\n    });\n  }\n\n  function handleYogaSubmit(e) {\n    e.preventDefault();\n    setyogaSessions(true)\n\n    const time = e.target.time.value;\n    const type = e.target.type.value;\n    const date = e.target.date.value;\n\n    fetch(\"/yoga\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        time: time,\n        type: type,\n        date: date\n      }),\n    });\n  }\n\n  function handleCardioSubmit(e) {\n    e.preventDefault();\n    setcardioSessions(true)\n\n    const type = e.target.type.value;\n    const distance = e.target.distance.value;\n    const time = e.target.time.value;\n    const date = e.target.date.value;\n\n    fetch(\"/meditation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        type: type,\n        distance: distance,\n        time: time,\n        date: date\n      }),\n    });\n  }\n\n  function seeProgress() {\n    console.log(activity)\n    \n\n  }\n\n  return (\n    <div>\n      <div class=\"header\">{header}</div>\n      <div class=\"site_info\">\n        <p>\n          Down to meditate? Into yoga? Always on the move? Log your self-care\n          sessions using the menu below, and keep track of your kick-ass\n          routines as you practice.\n        </p>\n      </div>\n      <Select\n        autofocus\n        className=\"activity_dropdown\"\n        isSearchable\n        placeholder=\"Select activity\"\n        onChange={selectActivity}\n        options={activityOptions}\n      />\n      {activity === \"meditation\" ? (\n        <MeditationForm handleMeditationSubmit={handleMeditationSubmit} activity={activity} seeProgress={seeProgress}/>\n      ) : null}\n      {activity === \"yoga\" ? (\n        <YogaForm handleYogaSubmit={handleYogaSubmit} activity={activity} seeProgress={seeProgress}/>\n      ) : null}\n      {activity === \"cardio\" ? (\n        <CardioForm handleCardioSubmit={handleCardioSubmit} activity={activity} seeProgress={seeProgress}/>\n      ) : null}\n    </div>\n  );\n}\n\n\n\n\n\n// Learn how to do a POST on a submit event\n// For monday: learn how to do a fetch on a click event\n// Create a form to be rendered for each activity selection..?\n// Learn how to update state upon setState if needed\n// I think setting state on submit button will re-render and re-fetch updated tables?\n\n// Back end\n// Add login database code by merging ian_practice with main\n// I think the routes we'll need for home are... /activities [:index] (GET)\n// And /activities/meditation [:create] ()\n// And /activities/yoga [:create]\n// And /activities/cardio [:create]\n\n// Goals:\n// Decide how to show and build the database entries for meditation, yoga and cardio in their own tables\n// Make a [:update] (PATCH) route, and [:destroy] (DELETE route) for these tables\n\n// code for later\n//   function customTheme(theme) {\n//       return {\n//           ...theme,\n//           colors: {\n//               ...theme.colors\n//           }\n//       }\n//   }\n\n"]},"metadata":{},"sourceType":"module"}