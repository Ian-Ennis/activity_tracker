{"version":3,"file":"react-router-dom.production.min.js","sources":["../../packages/react-router-dom/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport {\n  // components\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Redirect,\n  Route,\n  Router,\n  Routes,\n  // hooks\n  useBlocker,\n  useHref,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useOutlet,\n  useParams,\n  useResolvedLocation,\n  useRoutes,\n  // utils\n  createRoutesFromChildren,\n  matchRoutes,\n  resolveLocation,\n  generatePath\n} from 'react-router';\n\n////////////////////////////////////////////////////////////////////////////////\n// RE-EXPORTS\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  // components\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Redirect,\n  Route,\n  Router,\n  Routes,\n  // hooks\n  useBlocker,\n  useHref,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useOutlet,\n  useParams,\n  useResolvedLocation,\n  useRoutes,\n  // utils\n  createRoutesFromChildren,\n  matchRoutes,\n  resolveLocation,\n  generatePath\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({ children, timeout, window }) {\n  let historyRef = React.useRef(null);\n\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  return (\n    <Router\n      children={children}\n      history={historyRef.current}\n      timeout={timeout}\n    />\n  );\n}\n\nif (__DEV__) {\n  BrowserRouter.displayName = 'BrowserRouter';\n  BrowserRouter.propTypes = {\n    children: PropTypes.node,\n    timeout: PropTypes.number,\n    window: PropTypes.object\n  };\n}\n\n/**\n * A <Router> for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ children, timeout, window }) {\n  let historyRef = React.useRef(null);\n\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window });\n  }\n\n  return (\n    <Router\n      children={children}\n      history={historyRef.current}\n      timeout={timeout}\n    />\n  );\n}\n\nif (__DEV__) {\n  HashRouter.displayName = 'HashRouter';\n  HashRouter.propTypes = {\n    children: PropTypes.node,\n    timeout: PropTypes.number,\n    window: PropTypes.object\n  };\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef(function LinkWithRef(\n  {\n    as: Component = 'a',\n    onClick,\n    replace: replaceProp = false,\n    state,\n    target,\n    to,\n    ...rest\n  },\n  ref\n) {\n  let href = useHref(to);\n  let navigate = useNavigate();\n  let location = useLocation();\n  let toLocation = useResolvedLocation(to);\n\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (\n      !event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // Ignore everything but left clicks\n      (!target || target === '_self') && // Let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // Ignore clicks with modifier keys\n    ) {\n      event.preventDefault();\n\n      let isSameLocation =\n        toLocation.pathname === location.pathname &&\n        toLocation.search === location.search &&\n        toLocation.hash === location.hash;\n\n      // If the pathname, search, and hash haven't changed, a\n      // regular <a> will do a REPLACE instead of a PUSH.\n      let replace = !!replaceProp || isSameLocation;\n\n      navigate(to, { replace, state });\n    }\n  }\n\n  return (\n    <Component\n      {...rest}\n      href={href}\n      onClick={handleClick}\n      ref={ref}\n      target={target}\n    />\n  );\n});\n\nif (__DEV__) {\n  Link.displayName = 'Link';\n  Link.propTypes = {\n    as: PropTypes.elementType,\n    onClick: PropTypes.func,\n    replace: PropTypes.bool,\n    state: PropTypes.object,\n    target: PropTypes.string,\n    to: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string,\n        hash: PropTypes.string\n      })\n    ]).isRequired\n  };\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef(function NavLinkWithRef(\n  {\n    'aria-current': ariaCurrentProp = 'page',\n    activeClassName = 'active',\n    activeStyle = null,\n    className: classNameProp = '',\n    style: styleProp = null,\n    to,\n    ...rest\n  },\n  ref\n) {\n  let match = useMatch(to);\n  let ariaCurrent = match ? ariaCurrentProp : undefined;\n  let className = [classNameProp, match ? activeClassName : null]\n    .filter(Boolean)\n    .join(' ');\n  let style = {\n    ...styleProp,\n    ...(match ? activeStyle : null)\n  };\n\n  return (\n    <Link\n      {...rest}\n      aria-current={ariaCurrent}\n      className={className}\n      ref={ref}\n      style={style}\n      to={to}\n    />\n  );\n});\n\nif (__DEV__) {\n  NavLink.displayName = 'NavLink';\n  NavLink.propTypes = {\n    ...Link.propTypes,\n    'aria-current': PropTypes.oneOf([\n      'page',\n      'step',\n      'location',\n      'date',\n      'time',\n      'true'\n    ]),\n    activeClassName: PropTypes.string,\n    activeStyle: PropTypes.object,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    to: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string,\n        hash: PropTypes.string\n      })\n    ]).isRequired\n  };\n}\n\n/**\n * A declarative interface for showing a window.confirm dialog with the given\n * message when the user tries to navigate away from the current page.\n *\n * This also serves as a reference implementation for anyone who wants to\n * create their own custom prompt component.\n */\nexport function Prompt({ message, when }) {\n  usePrompt(message, when);\n  return null;\n}\n\nif (__DEV__) {\n  Prompt.displayName = 'Prompt';\n  Prompt.propTypes = {\n    message: PropTypes.string,\n    when: PropTypes.bool\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Prevents navigation away from the current page using a window.confirm prompt\n * with the given message.\n */\nexport function usePrompt(message, when) {\n  let blocker = React.useCallback(\n    tx => {\n      if (window.confirm(message)) tx.retry();\n    },\n    [message]\n  );\n\n  useBlocker(blocker, when);\n}\n"],"names":["as","useBlocker","useLocation","Route","event","isSameLocation","navigate","to","ariaCurrentProp","activeClassName","activeStyle","className","classNameProp","style","styleProp","rest","ref","match","useMatch","undefined","Boolean","Link","ariaCurrent","message","when","blocker","React","tx","window","c","Router","useRef","createHashHistory","current","historyRef","usePrompt","b"],"mappings":"yFA8HIA,8BAEuBC,iFAUVC,+FAGfC,aAGKC,iHAOGC,YASJC,sDAASC,4FA2CKC,gZAAkB,OAClCC,gBAAAA,EAAkB,SAClBC,YAAAA,EAAc,KACdC,UAAWC,EAAgB,GAC3BC,MAAOC,EAAY,KACnBP,GAAAA,KACGQ,GAELC,OAEIC,EAAQC,EAASX,YACHU,EAAQT,OAAkBW,IAC5B,CAACP,EAAeK,EAAQR,EAAkB,aAChDW,cACF,qBAOLC,mBACKN,kBACUO,YACHX,MACNK,QAVGH,IACPC,KACCG,EAAQP,EAAc,SAUpBH,mBA4DgBgB,EAASC,OAC7BC,EAAUC,cACZC,IACMC,eAAeL,IAAUI,WAE/B,CAACJ,MAGQE,EAASD,2CAvO6BI,QAArBC,EAA+BH,sBAC1CA,MAESG,gCACoBD,OAI5CF,gBAACI,8FAqBEC,aAIkBC,OAHNN,QAAaO,YAE1BC,8GA0KmBX,IACvBY,WADqBC"}